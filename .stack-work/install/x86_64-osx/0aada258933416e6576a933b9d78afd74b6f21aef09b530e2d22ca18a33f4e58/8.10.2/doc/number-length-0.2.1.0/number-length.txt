-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Number of digits in a number in decimal and hexadecimal representation.
--   
--   There are situations when it is necessary to know the length of a
--   number in decimal or hexadecimal form. In example when allocating
--   buffer while serializing a number in to binary or human readable
--   format.
--   
--   <pre>
--   λ&gt; numberLength (123 :: Int)
--   3
--   </pre>
--   
--   <pre>
--   λ&gt; numberLengthHex (123 :: Int)  -- 123 = 7b in hex
--   2
--   </pre>
@package number-length
@version 0.2.1.0


module Data.NumberLength.Internal

-- | Returns one of its arguments, depending on bit size of <a>Word</a>
--   type on current hardware.
either32or64 :: a -> a -> a


-- | Get number of digits of a number from a <a>Int</a>-family of numbers
--   in decimal or hexadecimal representation.
module Data.NumberLength.Int

-- | Number of digits in a <tt>number :: <a>Int</a></tt> in base 10.
lengthInt :: Int -> Int

-- | Number of digits in a <tt>number :: <a>Int8</a></tt> in base 10.
lengthInt8 :: Int8 -> Int

-- | Number of digits in a <tt>number :: <a>Int16</a></tt> in base 10.
lengthInt16 :: Int16 -> Int

-- | Number of digits in a <tt>number :: <a>Int32</a></tt> in base 10.
lengthInt32 :: Int32 -> Int

-- | Number of digits in a <tt>number :: <a>Int64</a></tt> in base 10.
lengthInt64 :: Int64 -> Int

-- | Number of digits in a <tt>number :: <a>Int</a></tt> in base 16.
lengthIntHex :: Int -> Int

-- | Number of digits in a <tt>number :: <a>Int8</a></tt> in base 16.
lengthInt8hex :: Int8 -> Int

-- | Number of digits in a <tt>number :: <a>Int16</a></tt> in base 16.
lengthInt16hex :: Int16 -> Int

-- | Number of digits in a <tt>number :: <a>Int32</a></tt> in base 16.
lengthInt32hex :: Int32 -> Int

-- | Number of digits in a <tt>number :: <a>Int64</a></tt> in base 16.
lengthInt64hex :: Int64 -> Int


-- | Get number of digits of an <a>Integer</a>.
--   
--   <i>Since 0.2.0.0</i>
module Data.NumberLength.Integer

-- | Number of digits in a <tt>number :: <a>Integer</a></tt> in base 10.
--   
--   <i>Since 0.2.0.0</i>
lengthInteger :: Integer -> Int

-- | Number of digits in a <tt>number :: <a>Integer</a></tt> in base 16.
--   
--   <i>Since 0.2.0.0</i>
lengthIntegerHex :: Integer -> Int


-- | Get number of digits of a number from a <a>Word</a>-family of numbers
--   in decimal or hexadecimal representation.
module Data.NumberLength.Word

-- | Number of digits in a <tt>number :: <a>Word</a></tt> in base 10.
lengthWord :: Word -> Int

-- | Number of digits in a <tt>number :: <a>Word8</a></tt> in base 10.
lengthWord8 :: Word8 -> Int

-- | Number of digits in a <tt>number :: <a>Word16</a></tt> in base 10.
lengthWord16 :: Word16 -> Int

-- | Number of digits in a <tt>number :: <a>Word32</a></tt> in base 10.
lengthWord32 :: Word32 -> Int

-- | Number of digits in a <tt>number :: <a>Word64</a></tt> in base 10.
lengthWord64 :: Word64 -> Int

-- | Number of digits in a <tt>number :: <a>Word</a></tt> in base 16.
lengthWordHex :: Word -> Int

-- | Number of digits in a <tt>number :: <a>Word8</a></tt> in base 16.
lengthWord8hex :: Word8 -> Int

-- | Number of digits in a <tt>number :: <a>Word16</a></tt> in base 16.
lengthWord16hex :: Word16 -> Int

-- | Number of digits in a <tt>number :: <a>Word32</a></tt> in base 16.
lengthWord32hex :: Word32 -> Int

-- | Number of digits in a <tt>number :: <a>Word64</a></tt> in base 16.
lengthWord64hex :: Word64 -> Int


-- | Get number of digits of a <a>Natural</a>.
--   
--   <i>Since 0.2.0.0</i>
module Data.NumberLength.Natural

-- | Number of digits in a <tt>number :: <a>Natural</a></tt> in base 10.
--   
--   <i>Since 0.2.0.0</i>
lengthNatural :: Natural -> Int

-- | Number of digits in a <tt>number :: <a>Natural</a></tt> in base 16.
--   
--   <i>Since 0.2.0.0</i>
lengthNaturalHex :: Natural -> Int


-- | Polymorphic interface for getting number of digits of a number in
--   decimal or hexadecimal representation.
module Data.NumberLength

-- | Get number of digits of a number in base 10 and base 16. Note the
--   following:
--   
--   <ul>
--   <li>There is no <a>Num</a> constraint, so that type wrappers aren't
--   forced to provide instance for it. This is because there are things
--   represented using numbers, but they aren't numbers, e.g. telephone
--   numbers.</li>
--   <li>This type class doesn't handle signed numbers, in an intuitive
--   way. See also <a>SignedNumberLength</a>.</li>
--   <li>There is a special class for bounded numbers, see
--   <a>BoundedNumberLength</a>, that provides similar functionality as
--   <a>Bounded</a>, but for number of digits in a number.</li>
--   </ul>
class NumberLength a

-- | Get number of digits in base 10 for specified number. Note that if
--   number is signed, then this function will return length of its
--   absolute value.
--   
--   <pre>
--   &gt;&gt;&gt; numberLength (123 :: Int)
--   3
--   
--   &gt;&gt;&gt; numberLength (-123 :: Int)
--   3
--   </pre>
--   
--   See also <a>signedNumberLength</a>.
numberLength :: NumberLength a => a -> Int

-- | Get number of digits in base 16 for specified number. Note that if
--   number is signed, then this function will return length of its
--   absolute value.
--   
--   <pre>
--   &gt;&gt;&gt; numberLengthHex (123 :: Int)  -- 123 = 7b in hex
--   2
--   
--   &gt;&gt;&gt; numberLengthHex (-123 :: Int)
--   2
--   </pre>
--   
--   See also <a>signedNumberLengthHex</a>.
numberLengthHex :: NumberLength a => a -> Int

-- | Get number of digits of a signed number in base 10 and base 16.
class NumberLength a => SignedNumberLength a

-- | Get number of digits in base 10 for specified number.
--   
--   <pre>
--   &gt;&gt;&gt; signedNumberLength (123 :: Int)
--   3
--   
--   &gt;&gt;&gt; signedNumberLength (-123 :: Int)
--   4
--   </pre>
--   
--   Default implementation provided if <tt>a</tt> has also <a>Num</a> and
--   <a>Ord</a> instances:
--   
--   <pre>
--   <a>signedNumberLength</a> n = signLength + <a>numberLength</a> n
--     where
--       signLength = if n &lt; 0 then 1 else 0
--   </pre>
signedNumberLength :: SignedNumberLength a => a -> Int

-- | Get number of digits in base 10 for specified number.
--   
--   <pre>
--   &gt;&gt;&gt; signedNumberLength (123 :: Int)
--   3
--   
--   &gt;&gt;&gt; signedNumberLength (-123 :: Int)
--   4
--   </pre>
--   
--   Default implementation provided if <tt>a</tt> has also <a>Num</a> and
--   <a>Ord</a> instances:
--   
--   <pre>
--   <a>signedNumberLength</a> n = signLength + <a>numberLength</a> n
--     where
--       signLength = if n &lt; 0 then 1 else 0
--   </pre>
signedNumberLength :: (SignedNumberLength a, Num a, Ord a) => a -> Int

-- | Get number of digits in base 16 for specified number.
--   
--   <pre>
--   &gt;&gt;&gt; signedNumberLengthHex (123 :: Int)
--   2
--   
--   &gt;&gt;&gt; signedNumberLengthHex (-123 :: Int)
--   16
--   </pre>
--   
--   Negative number is shown as ones' complement, e.g. <tt>(-123 :: Int) =
--   ffffffffffffff85</tt> on 64 bit platform.
signedNumberLengthHex :: SignedNumberLength a => a -> Int

-- | Get maximum number of digits of a number in base 10 and 16. Minimal
--   number of digits is considered to be always 1, and therefore there is
--   no method for it.
class NumberLength a => BoundedNumberLength a

-- | Get maximum number of digits of a number in base 10.
maxNumberLength :: BoundedNumberLength a => proxy a -> Int

-- | Get maximum number of digits of a number in base 16.
maxNumberLengthHex :: BoundedNumberLength a => proxy a -> Int
instance Data.NumberLength.BoundedNumberLength GHC.Types.Int
instance Data.NumberLength.BoundedNumberLength GHC.Int.Int64
instance Data.NumberLength.BoundedNumberLength GHC.Int.Int32
instance Data.NumberLength.BoundedNumberLength GHC.Int.Int16
instance Data.NumberLength.BoundedNumberLength GHC.Int.Int8
instance Data.NumberLength.BoundedNumberLength GHC.Types.Word
instance Data.NumberLength.BoundedNumberLength GHC.Word.Word64
instance Data.NumberLength.BoundedNumberLength GHC.Word.Word32
instance Data.NumberLength.BoundedNumberLength GHC.Word.Word16
instance Data.NumberLength.BoundedNumberLength GHC.Word.Word8
instance Data.NumberLength.SignedNumberLength GHC.Types.Int
instance Data.NumberLength.SignedNumberLength GHC.Int.Int64
instance Data.NumberLength.SignedNumberLength GHC.Int.Int32
instance Data.NumberLength.SignedNumberLength GHC.Int.Int16
instance Data.NumberLength.SignedNumberLength GHC.Int.Int8
instance Data.NumberLength.NumberLength GHC.Types.Int
instance Data.NumberLength.NumberLength GHC.Int.Int64
instance Data.NumberLength.NumberLength GHC.Int.Int32
instance Data.NumberLength.NumberLength GHC.Int.Int16
instance Data.NumberLength.NumberLength GHC.Int.Int8
instance Data.NumberLength.NumberLength GHC.Types.Word
instance Data.NumberLength.NumberLength GHC.Word.Word64
instance Data.NumberLength.NumberLength GHC.Word.Word32
instance Data.NumberLength.NumberLength GHC.Word.Word16
instance Data.NumberLength.NumberLength GHC.Word.Word8
instance Data.NumberLength.NumberLength GHC.Integer.Type.Integer
instance Data.NumberLength.NumberLength GHC.Natural.Natural
