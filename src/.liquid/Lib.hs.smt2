(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_anf$36$$35$$35$7205759403792804437$35$$35$d2ON () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun y1$35$$35$a1X4 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ () Int)
(declare-fun lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun Lib.get2ndHalf () Int)
(declare-fun addrLen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH () Bool)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804439$35$$35$d2OP () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804435$35$$35$d2OL () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun x$35$$35$a1WP () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804422$35$$35$d2Oy () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun halfLength$35$$35$a1X0 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun z$35$$35$a1X8 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo () Int)
(declare-fun papp3 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804418$35$$35$d2Ou () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804390$35$$35$d2O2 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun Lib.get1stHalf () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792804391$35$$35$d2O3 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804404$35$$35$d2Og () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun Lib.padNumberBeforeWithZeroes () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or () Int)
(declare-fun autolen () Int)
(declare-fun y$35$$35$a1WV () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun x$35$$35$a1WW () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804401$35$$35$d2Od () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804403$35$$35$d2Of () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun n$35$$35$a1WZ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804440$35$$35$d2OQ () Int)
(declare-fun Math.NumberTheory.Logarithms.integerLogBase () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$867 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804436$35$$35$d2OM () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun GHC.Natural.NatS$35$ () Int)
(declare-fun lit$36$main () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI () Bool)
(declare-fun GHC.List.filter () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun y$35$$35$a1WX () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792804428$35$$35$d2OE () Int)
(declare-fun Lib.karatsuba () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804406$35$$35$d2Oi () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804413$35$$35$d2Op () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot () Int)
(declare-fun halfLength$35$$35$a1WT () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun Lib.getNextPowerOf2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804452$35$$35$d2P2 () Int)
(declare-fun x$35$$35$a1WS () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Natural.$36$WNatJ$35$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Lib.getLargerTwoNumbers () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804450$35$$35$d2P0 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Natural.NatJ$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1382 () Int)
(declare-fun lit$36$someFunc () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804427$35$$35$d2OD () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$549 () Int)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 () Int)
(declare-fun lit$36$Lib () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804416$35$$35$d2Os () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804438$35$$35$d2OO () Int)
(declare-fun x$35$$35$a1WU () Int)
(declare-fun x$35$$35$a1WR () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun ksba$35$$35$a1WY () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox () Int)
(declare-fun Lib.halfNumberDigits () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun System.IO.putStrLn () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun Data.NumberLength.numberLength () Int)
(declare-fun u$35$$35$a1X5 () Int)
(declare-fun v$35$$35$a1X6 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804419$35$$35$d2Ov () Int)
(declare-fun w$35$$35$a1X7 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On () Int)
(declare-fun y2$35$$35$a1X3 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun x1$35$$35$a1X2 () Int)
(declare-fun GHC.Types.W$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1360 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804399$35$$35$d2Ob () Int)
(declare-fun Lib.someFunc () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804405$35$$35$d2Oh () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun x2$35$$35$a1X1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804407$35$$35$d2Oj () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804429$35$$35$d2OF () Int)
(declare-fun lq_tmp$36$x$35$$35$950 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun x$35$$35$a1WQ () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV () Int)
(declare-fun GHC.Classes.$36$fEqInt () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun y$35$$35$a1WO () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804426$35$$35$d2OC () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA () Int)
(declare-fun x$35$$35$a1WN () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Real.$36$fIntegralInt () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Data.NumberLength.$36$fNumberLengthInt () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$Lib lit$36$someFunc lit$36$main))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$someFunc) 8))
(assert (= (strLen lit$36$Lib) 3))
(push 1)
(assert (and (and (= VV$35$$35$F$35$$35$17 lq_anf$36$$35$$35$7205759403792804406$35$$35$d2Oi) (= VV$35$$35$F$35$$35$17 lq_anf$36$$35$$35$7205759403792804407$35$$35$d2Oj)) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804406$35$$35$d2Oi 2) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804407$35$$35$d2Oj lq_anf$36$$35$$35$7205759403792804406$35$$35$d2Oi)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$17 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 Int) (lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 Int) (lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 Int) (VV$35$$35$959 Int)) (and (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 n$35$$35$a1WZ) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW) (= VV$35$$35$959 n$35$$35$a1WZ)) (exists ((VV$35$$35$F$35$$35$2 Int) (ksba$35$$35$a1WY Int) (lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV Int) (lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW Int)) (and (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW) (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 VV$35$$35$F$35$$35$2) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW)))))) (= lq_anf$36$$35$$35$7205759403792804428$35$$35$d2OE (+ u$35$$35$a1X5 v$35$$35$a1X6)) (= z$35$$35$a1X8 (- lq_anf$36$$35$$35$7205759403792804428$35$$35$d2OE w$35$$35$a1X7)) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804429$35$$35$d2OF 1) (= lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG lq_anf$36$$35$$35$7205759403792804429$35$$35$d2OF) (and (= VV$35$$35$F$35$$35$5 lq_anf$36$$35$$35$7205759403792804439$35$$35$d2OP) (= VV$35$$35$F$35$$35$5 lq_anf$36$$35$$35$7205759403792804440$35$$35$d2OQ)) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA 2) (= lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH (= n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG)) (= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (and (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI (= n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG)) (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH)) (and (= halfLength$35$$35$a1X0 (Z3_OP_DIV n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 0)) (>= halfLength$35$$35$a1X0 0)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1)) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (< 1 lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB) (< halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ))) (and (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI (= n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG)) (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH)) (and (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI (= n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804430$35$$35$d2OG)) (= lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH) (not lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI) (not lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI) (not lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI)) (= lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ 10) (= lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ) (= (= lq_anf$36$$35$$35$7205759403792804435$35$$35$d2OL 0) (= lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK 0)) (= lq_anf$36$$35$$35$7205759403792804436$35$$35$d2OM (Z3_OP_MUL lq_anf$36$$35$$35$7205759403792804435$35$$35$d2OL u$35$$35$a1X5)) (= lq_anf$36$$35$$35$7205759403792804437$35$$35$d2ON 10) (= lq_anf$36$$35$$35$7205759403792804426$35$$35$d2OC (- x1$35$$35$a1X2 x2$35$$35$a1X1)) (= lq_anf$36$$35$$35$7205759403792804438$35$$35$d2OO lq_anf$36$$35$$35$7205759403792804437$35$$35$d2ON) (= lq_anf$36$$35$$35$7205759403792804427$35$$35$d2OD (- y1$35$$35$a1X4 y2$35$$35$a1X3)) (= lq_anf$36$$35$$35$7205759403792804439$35$$35$d2OP 2) (= lq_anf$36$$35$$35$7205759403792804440$35$$35$d2OQ lq_anf$36$$35$$35$7205759403792804439$35$$35$d2OP)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$5 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 Int) (lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 Int) (lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 Int) (VV$35$$35$959 Int)) (and (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 n$35$$35$a1WZ) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW) (= VV$35$$35$959 n$35$$35$a1WZ)) (exists ((VV$35$$35$F$35$$35$2 Int) (ksba$35$$35$a1WY Int) (lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV Int) (lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW Int)) (and (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW) (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 VV$35$$35$F$35$$35$2) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW)))))) (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA 2) (and (= VV$35$$35$F$35$$35$8 (- x1$35$$35$a1X2 x2$35$$35$a1X1)) (= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792804426$35$$35$d2OC)) (= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (and (= halfLength$35$$35$a1X0 (Z3_OP_DIV n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 0)) (>= halfLength$35$$35$a1X0 0)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1)) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (< 1 lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB) (< halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ))) (= lq_anf$36$$35$$35$7205759403792804426$35$$35$d2OC (- x1$35$$35$a1X2 x2$35$$35$a1X1)) (= lq_anf$36$$35$$35$7205759403792804427$35$$35$d2OD (- y1$35$$35$a1X4 y2$35$$35$a1X3))))
(push 1)
(assert (not (and (< VV$35$$35$F$35$$35$8 x$35$$35$a1WW) (>= VV$35$$35$F$35$$35$8 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 Int) (lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 Int) (lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 Int) (VV$35$$35$959 Int)) (and (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 n$35$$35$a1WZ) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW) (= VV$35$$35$959 n$35$$35$a1WZ)) (exists ((VV$35$$35$F$35$$35$2 Int) (ksba$35$$35$a1WY Int) (lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV Int) (lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW Int)) (and (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW) (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 VV$35$$35$F$35$$35$2) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW)))))) (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA 2) (= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (= VV$35$$35$F$35$$35$9 x2$35$$35$a1X1) (and (= halfLength$35$$35$a1X0 (Z3_OP_DIV n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 0)) (>= halfLength$35$$35$a1X0 0)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1)) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (< 1 lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB) (< halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ)))))
(push 1)
(assert (not (and (< VV$35$$35$F$35$$35$9 x$35$$35$a1WW) (>= VV$35$$35$F$35$$35$9 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 Int) (lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 Int) (lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 Int) (VV$35$$35$959 Int)) (and (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 n$35$$35$a1WZ) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW) (= VV$35$$35$959 n$35$$35$a1WZ)) (exists ((VV$35$$35$F$35$$35$2 Int) (ksba$35$$35$a1WY Int) (lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV Int) (lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW Int)) (and (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW) (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 VV$35$$35$F$35$$35$2) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW)))))) (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA 2) (= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (and (= halfLength$35$$35$a1X0 (Z3_OP_DIV n$35$$35$a1WZ lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 0)) (>= halfLength$35$$35$a1X0 0)) (=> (and (>= n$35$$35$a1WZ 0) (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1)) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (< 1 lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB) (< halfLength$35$$35$a1X0 n$35$$35$a1WZ)) (=> (>= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB 1) (<= halfLength$35$$35$a1X0 n$35$$35$a1WZ))) (= VV$35$$35$F$35$$35$10 x1$35$$35$a1X2)))
(push 1)
(assert (not (and (< VV$35$$35$F$35$$35$10 x$35$$35$a1WW) (>= VV$35$$35$F$35$$35$10 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (exists ((lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 Int) (lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 Int) (lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 Int) (VV$35$$35$959 Int)) (and (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 n$35$$35$a1WZ) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW) (= VV$35$$35$959 n$35$$35$a1WZ)) (exists ((VV$35$$35$F$35$$35$2 Int) (ksba$35$$35$a1WY Int) (lq_anf$36$$35$$35$7205759403792804445$35$$35$d2OV Int) (lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW Int)) (and (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792804446$35$$35$d2OW) (and (= lq_karg$36$y$35$$35$a1WX$35$$35$k_$35$$35$960 y$35$$35$a1WX) (= lq_karg$36$VV$35$$35$959$35$$35$k_$35$$35$960 VV$35$$35$F$35$$35$2) (= lq_karg$36$x$35$$35$a1WW$35$$35$k_$35$$35$960 x$35$$35$a1WW)))))) (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA 2) (= lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (and (= VV$35$$35$F$35$$35$11 lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA) (= VV$35$$35$F$35$$35$11 lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$11 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (and (= (= VV$35$$35$F$35$$35$12 0) (= lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox 0)) (= VV$35$$35$F$35$$35$12 lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz)) (= lq_anf$36$$35$$35$7205759403792804419$35$$35$d2Ov (- x$35$$35$a1WU y$35$$35$a1WV)) (= lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow 10) (= lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow) (= (= lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz 0) (= lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox 0))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$12 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq 1) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq) (= lq_anf$36$$35$$35$7205759403792804416$35$$35$d2Os (- lq_anf$36$$35$$35$7205759403792804413$35$$35$d2Op lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or)) GHC.Types.True (= (= lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot 0) (= lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo 0)) (and (= lq_anf$36$$35$$35$7205759403792804418$35$$35$d2Ou (mod x$35$$35$a1WS lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)) (=> (and (<= 0 x$35$$35$a1WS) (< 0 lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)) (and (<= 0 lq_anf$36$$35$$35$7205759403792804418$35$$35$d2Ou) (< lq_anf$36$$35$$35$7205759403792804418$35$$35$d2Ou lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)))) (and (= VV$35$$35$F$35$$35$13 (mod x$35$$35$a1WS lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)) (=> (and (<= 0 x$35$$35$a1WS) (< 0 lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)) (and (<= 0 VV$35$$35$F$35$$35$13) (< VV$35$$35$F$35$$35$13 lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot))) (= VV$35$$35$F$35$$35$13 lq_anf$36$$35$$35$7205759403792804418$35$$35$d2Ou)) (= lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om)) (= lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On 10) (= lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On)))
(push 1)
(assert (not (and (< VV$35$$35$F$35$$35$13 x$35$$35$a1WS) (>= VV$35$$35$F$35$$35$13 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq 1) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq) (= lq_anf$36$$35$$35$7205759403792804416$35$$35$d2Os (- lq_anf$36$$35$$35$7205759403792804413$35$$35$d2Op lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or)) GHC.Types.True (= (= lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot 0) (= lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo 0)) (= lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (and (= (= VV$35$$35$F$35$$35$14 0) (= lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo 0)) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol)) (and (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om (= lq_anf$36$$35$$35$7205759403792804408$35$$35$d2Ok halfLength$35$$35$a1WT)) (= lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om lq_anf$36$$35$$35$7205759403792804409$35$$35$d2Ol) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om) (not lq_anf$36$$35$$35$7205759403792804410$35$$35$d2Om)) (= lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On 10) (= lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$14 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
